#!/bin/bash
#
#   BunsenLabs Conky selection and switcher script
#
#   Written by damo <damo@bunsenlabs.org> for BunsenLabs Linux, April 2015
#   Beta tested and stamped "zen" by <Sector11>
#
########################################################################
#
#   Conkys must be in $CONKYPATH
#   The name must end with "conky" or "conkyrc"
#
#   When the dialog opens, any running conkys will be checkmarked.
#
#   Click "OK" and all running conkys are stopped, and all checkmarked
#   conkys are started
#
#   To stop a conky just uncheck it, and "OK"
#
#   Running conkys are saved to a session file, and can be run with
#   the "bl-conky-session" script. To start the default conky session at
#   login, add the following line to autostart:
#
#     (sleep 2s && bl-conky-session --autostart) &
#
#   Different saved-session files can be used by running the script with:
#
#           bl-conkyzen -f /path/to/sessionfile &
#           bl-conkyzen -z (opens gui entry dialog for filepath)
#
########################################################################
CONKYSTORE="$HOME/.config/conkystore"
CONKYDIRS="$CONKYSTORE/conkydirs"
CONKYPATH="$HOME/.config/conky"
TEMPFILE="$CONKYSTORE/conky-temp"
TEMPFILE2="$CONKYSTORE/conky-temp2"
SESSIONFILE="$CONKYSTORE/conky-sessionfile"
SESSIONS="$CONKYSTORE/saved-sessions"    # to be used by a pipemenu
CRC="$HOME/.conkyrc"
BLDEFAULT="$CONKYPATH/BL-Default.conkyrc"

### DIALOG VARIABLES
DIALOG="yad --center --undecorated --borders=20 --window-icon=gtk-preferences"
DIALOGDEC="yad --center  --borders=20 --window-icon=gtk-preferences"
TITLE="BLOB Conky Manager"
IMG="--image="
IMGPATH="Bunsenlabs-flame-256.svg"
T="--text="
OK="--button=OK:0"
CANCEL="--button=gtk-cancel:1"
EXIT="--button=gtk-quit:1"
CLOSE="--button=gtk-close:1"

######################################################################

USAGE1=$(echo -e "\vUSAGE:\tbl-conkyzen [OPTION]...FILES"
        echo -e "\v\tWith no command option the script runs the gui"
        echo -e "\v\t-h,--help \t\t: full USAGE help"
        echo -e "\t-f,--file  FILEPATH\t: specify file to save session to"
)

USAGE2=$(echo -e "\vUSAGE:\tbl-conkyzen [OPTION]...FILES"
        echo -e "\v\tWith no command option the script runs the gui"
        echo -e "\v\t-h,--help   : this USAGE help"
        echo -e "\t-f,--file  FILEPATH : specify file to save session to"
        echo -e "\v\tWhen the dialog opens, any running conkys will be checkmarked."
        echo -e "\tClick "OK" and all running conkys are stopped, and all"
        echo -e "\tcheckmarked conkys are started."
        echo -e "\v\tTo stop a conky just uncheck it, and \"OK\""
        echo -e "\vEXAMPLES:"
        echo -e "\tSave session to a new saved-session file with:"
        echo -e "\v\t\tbl-conkyzen -f /path/to/sessionfile"
        echo -e "\v\tTo start the default conky session at login, add the"
        echo -e "\tfollowing line to autostart:"
        echo -e "\v\t\t(sleep 2s && bl-conky-session --autostart) &\v"
)

########## FUNCTIONS ###################################################

function Intro(){
NUMDIRS=1

    if [[ $NUMDIRS -gt 0 ]];then
        INTRO=$($DIALOGDEC $IMG$IMGPATH "$T$TXTINTRO" \
        --title="$TITLE" \
        --button="Run:0" --button="Select Dir:2" $CLOSE \
        --borders=30 \
        --width=480 --height=500 \
        2>/dev/null ) 
    else
        INTRO=$($DIALOGDEC $IMG$IMGPATH \
        "$T$TXTINTRO" \
        --button="Save Settings:0" --button="gtk-close:1" \
        --borders=30 \
        2>/dev/null ) 
    fi

    RET=$?
    case $RET in
        0)  echo "placeholder"
            ;;
        1)  echo "CANCEL..."
            exit 0
            ;;
        2)  selectDIRS
            
            ;;
        *)  echo "RETURN ERROR" 2>&1
            ;;
    esac
}

function getRunning(){

    if [[ $(pidof conky) ]];then    # get full command of running conkys
        >$TEMPFILE
        pgrep -ax conky | while read pid CMD;do
        echo "$CMD"
            echo "$CMD" >>$TEMPFILE
        done
    fi
}

function selectDIRS(){
    ADD=0
    LOOP=1
    
    while [[ $LOOP ]];do
        RET=$($DIALOG --button="Add:2" $OK $CANCEL)
        case $? in
            
            0 ) 
            
            esac
    done
    

    
    DIR=$($DIALOG --file --directory)
    echo "$DIR"
    
    FP=$(echo "$FP" | cut -d '/' -f-3)
    if [[ $FP = $HOME ]];then
        DIR=$(echo "$DIR" | cut -d '/' -f4-)
    fi
    if [[ -e "$CONKYDIRS" ]];then
        echo "$DIR" >> "$CONKYDIRS"
    else
        echo "$DIR" > "$CONKYDIRS"
    fi
}

function fillArrays(){
    if [[ $1 != 0 ]];then
        num="$1"    # 1st arg: array index
    else
        num=0   # '~/.conkyrc' added to array
    fi

    if [[ $num == 0 ]];then
        cPATH="$CRC"
        cARR="$USER/.conkyrc"
    else
        cPATH="$2"   # 2nd arg: full filepath to conky
        cARR="$3"    # 3rd arg: displayed name: "directory/*conky(rc)"
    fi

    conkysPath[$num]="$cPATH"
    conkysArr[$num]="$cARR"
    if grep -qx "$cPATH" "$TEMPFILE";then # if conky is running (read from tempfile)
        checkArr[$num]="TRUE"       # make checkmark in dialog
    else
        checkArr[$num]="FALSE"
    fi
}

function findConky(){
# search dirs for conkys files - looking for "conky" in the name
# if "*conky(rc)" then display it
    num=0   # added default .conkyrc
    fillArrays $num "$CRC" "$USER/.conkyrc"
    num=1
    
    while read LINE;do
        for x in $(find "$LINE" -type f );do
            f=$(basename "$x")    # filename from filepath
            
            if [[ $x = *conkyrc ]] || [[ $x = *conky ]];then    # filename ends with *conky or *conkyrc
                # get directory/conkyname to display in list
                #CONKY=$( echo "$x" | awk -F"/" '{print $(NF-1)"/"$NF}')
                CONKY="$x"
                fillArrays $num "$x" "$CONKY"
                num=$(($num+1))
            fi
        done
    
    done <"$CONKYDIRS"
    
}
        LINE=$(echo ${LINE%:} | awk '{print $NF }')
        
        echo "LINE= $LINE"
########################################################################

mkdir -p "$CONKYSTORE"

#Intro
# get conky directories in .conky, add to array
getRunning
findConky

# loop through arrays, and build msg text for yad dialog
CONKYLIST=""
for ((j=0; j<${#conkysArr[*]}; j++));do
    CONKYLIST="$CONKYLIST ${checkArr[j]} ${conkysArr[j]}"
done
echo "conkylist= ${CONKYLIST[@]}"



    ## Populate yad dialog from array, get return value(s)
    RET=$(yad --list --title "BunsenLabs Conky Chooser" \
        --text "Session will be saved to:\n $SESSIONFILE"\
        --checklist --width=400 --height=500 \
        --column="Select" --column="Conky Name" --separator=":" \
        $CONKYLIST)

yad --list --title "BunsenLabs Conky Chooser" \
        --text "Session will be saved to:\n $SESSIONFILE"\
        --checklist --width=400 --height=500 \
        --column="Select" --column="Conky Name" --separator=":" \
        $CONKYLIST
